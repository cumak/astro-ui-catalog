import { componentPageHtmlTemplate } from "../templates/component-page-html.js";
import fs from "fs";
import { writeFileSync } from "fs";
import path from "path";
import { ADD_CODE, catalogCoreFolderName, previewActualProps } from "../config.js";
import { pascalCase, SrcDir, sampleImgPath, outputDir } from "./utils/pathUtils.js";
import { extractDefaultPropsForPreview } from "./utils/previewUtils.js";
import { extractPropsText } from "./utils/propsUtils.js";
import { extractDescription } from "./utils/descriptionUtils.js";
import { getPreview, extractSlotContent, createPropsArr } from "./utils/previewUtils.js";
import { generateTopPage } from "./generateTop.js";
import { createLinkListObjArr } from "./utils/componentList.js";
import { getAllAstroFiles, getSourceFileFromContent } from "./utils/fileUtils.js";
import { extractActualProps } from "./utils/extractActualProps.js";

interface GenerateComponentPageParams {
  name: string;
  relativePath: string;
  propText: string;
  previewProps: Record<string, any>;
  description: string | null;
  slotContent?: string;
}

async function generateComponentPage({
  relativePath,
  name,
  propText,
  previewProps,
  description,
  slotContent = "",
}: GenerateComponentPageParams): Promise<string> {
  const errorProps = Object.keys(previewProps).filter((key) => previewProps[key] === "errordummy");

  const { objectPropsArr, simplePropsArr, needsSampleImgImportBoolean } = createPropsArr(previewProps);

  const propsStr = simplePropsArr.join(" ");

  let propsStrForPreview = propsStr;
  let additionalImports = "";
  if (previewActualProps.enable) {
    const actualPropsResult = extractActualProps(name, true);
    if (!previewActualProps.exclude || !previewActualProps.exclude.includes(name)) {
      if (actualPropsResult && typeof actualPropsResult === "object") {
        propsStrForPreview = `${actualPropsResult.attributes}` as string;
        // インポート文を追加
        if (actualPropsResult.imports.length > 0) {
          additionalImports = actualPropsResult.imports.join("\n");
        }
      }
    }
  }
  const preview = getPreview(errorProps, propsStrForPreview, slotContent, name);

  const usage =
    slotContent.trim() === ""
      ? `&lt;${name} ${propsStr} /&gt;`
      : `&lt;${name} ${propsStr}&gt;${slotContent}&lt;/${name}&gt;`;

  const variablesBlockConst = objectPropsArr.map((prop) => {
    return `const ${prop.key} = ${prop.value};`;
  });
  const variablesBlock = objectPropsArr.length > 0 ? variablesBlockConst.join("\n") : "";
  const sampleImgImport = needsSampleImgImportBoolean ? `import sampleImg from "${sampleImgPath}";` : "";

  // 全てのインポート文を結合
  const allImports = [sampleImgImport, additionalImports].filter(Boolean).join("\n");

  const links = createLinkListObjArr();
  const addCode: {
    importStyle?: string[];
    scriptTag?: string[];
    moduleScript?: string[];
  } = ADD_CODE || null;

  const generatedPage = await componentPageHtmlTemplate({
    relativePath,
    name,
    description,
    links,
    propText,
    preview,
    usage,
    sampleImgImport: allImports,
    importFiles: addCode?.importStyle?.map((imp: string) => `import "${imp}";`).join("\n") || "",
    scriptImports: addCode?.scriptTag?.map((src: string) => `<script src="${src}" defer></script>`).join("\n") || "",
    moduleScriptImports: addCode?.moduleScript?.map((src: string) => `import "${src}";`).join("\n") || "",
    variablesBlock,
  });
  return generatedPage;
}

async function main() {
  if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });
  const astroFiles = getAllAstroFiles(SrcDir);
  for (const fullPath of astroFiles) {
    const relativePath = path.relative(SrcDir, fullPath);
    const content = fs.readFileSync(fullPath, "utf-8");
    const sourceFile = getSourceFileFromContent(content);
    const fileName = path.basename(relativePath, ".astro");
    const name = pascalCase(fileName);
    const propText = extractPropsText(sourceFile);
    const previewProps = extractDefaultPropsForPreview(sourceFile);
    const description = extractDescription(content);
    const slotContent = extractSlotContent(content);
    const outFile = path.join(outputDir, relativePath);
    fs.mkdirSync(path.dirname(outFile), { recursive: true });
    const generatedPage = await generateComponentPage({
      relativePath,
      name,
      propText,
      previewProps,
      description,
      slotContent,
    });
    fs.writeFileSync(outFile, generatedPage),
      {
        encoding: "utf-8",
      };

    const markerFile = path.join(outputDir, `.generated-by-catalog-${catalogCoreFolderName}_v1`);

    writeFileSync(markerFile, "This folder was generated by generateCatalog.ts\n");
    console.log(`✅ ${name} ページを生成しました。`);
  }
  await generateTopPage(astroFiles);

  console.log("✅ UI カタログページを生成しました。");
}

export default main;
